package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.EntryDTOs.AuthorEntryDto;
import com.example.Student_Library_Management_System.Model.Author;
import com.example.Student_Library_Management_System.Model.Book;
import com.example.Student_Library_Management_System.Repositories.AuthorRepository;
import com.example.Student_Library_Management_System.ResponseDTOs.AuthorResponseDto;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

@Service
@AllArgsConstructor
public class AuthorService
{
    @Autowired
    AuthorRepository authorRepository;


    public String addAuthor(AuthorEntryDto authorEntryDto)
    {
        // we are getting an object of AuthorEntryDto. But cant send it to Repository layer as it is
        // because Repository layer can only interact with Entity
        // it doesn't recognize dto
        // solution = convert Dto object -> Entity object (authorEntryDto -> author) & set its attributes

        Author author = new Author();

        author.setName(authorEntryDto.getName());
        author.setAge(authorEntryDto.getAge());
        author.setCountry(authorEntryDto.getCountry());
        author.setRating(authorEntryDto.getRating());
        // other attributes are autogenerated

        authorRepository.save(author);
        return ("Author added successfully");
    }


    public AuthorResponseDto getAuthor(int authorId)
    {
        Author author =  authorRepository.findById(authorId).get();
        AuthorResponseDto authorResponseDto = new AuthorResponseDto();

        // Set attributes of authorResponseDto.
        authorResponseDto.setName(author.getName());
        authorResponseDto.setAge(author.getAge());
        authorResponseDto.setRating(author.getRating());
        authorResponseDto.setCountry(author.getCountry());
                         // convert List<Book> --> List<String> which stores only name of book
        List<Book> bookList = author.getBooksWritten();
        List<String> namesOfBooksWritten = new ArrayList<>();

        for (Book b: bookList) {
            namesOfBooksWritten.add(b.getName());
        }

        authorResponseDto.setBooksWritten(namesOfBooksWritten);

        return authorResponseDto;
    }
}
