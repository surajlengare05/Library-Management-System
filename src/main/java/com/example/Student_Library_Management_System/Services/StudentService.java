package com.example.Student_Library_Management_System.Services;

import com.example.Student_Library_Management_System.EntryDTOs.StudentEntryDto;
import com.example.Student_Library_Management_System.Repositories.TransactionRepository;
import com.example.Student_Library_Management_System.RequestDTOs.StudentUpdateMobRequestDto;
import com.example.Student_Library_Management_System.Enum.CardStatus;
import com.example.Student_Library_Management_System.Model.Card;
import com.example.Student_Library_Management_System.Model.Student;
import com.example.Student_Library_Management_System.Repositories.StudentRepository;
import com.example.Student_Library_Management_System.ResponseDTOs.StudentResponseDto;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StudentService
{
    @Autowired
    StudentRepository studentRepository;
    @Autowired
    TransactionRepository transactionRepository;

    public String addStudent(StudentEntryDto studentEntryDto)
    {
        Student student = new Student();
        student.setName(studentEntryDto.getName());
        student.setEmail(studentEntryDto.getEmail());
        student.setMobNo(studentEntryDto.getMobNo());
        student.setAge(studentEntryDto.getAge());
        student.setCountry(studentEntryDto.getCountry());

       Card card = new Card();
       card.setCardStatus(CardStatus.ACTIVATED);  // CardStatus has been set (i.e assigned a value) // This is how Enums are set
       card.setStudent(student);     // Foreing key of child class (i.e card) has been set

        // all the other attributes of card are autogenerated

        student.setCard(card);  // setting card variable of student class

        // all the other attributes of student are coming from Postman

        // before saving entities to DB, make sure that we have assigned values to all the attributes(except autogenerated)  of those entities
        // i.e all the atributes of that entity are set.

        studentRepository.save(student);

        // if we had used only Unidirectional mapping then, we had to save both parent(student) & child(card) individually to DB
        // but since we have used Bidirectional mapping, hence we will save only parent.
        // by cascading effect, child will get saved automatically

        return ("Student & Card added successfully");

    }

    public StudentResponseDto getStudentByName(String name)
    {
        Student student = studentRepository.findByName(name);

       StudentResponseDto studentResponseDto = new StudentResponseDto();
       studentResponseDto.setId(student.getId());
       studentResponseDto.setName(student.getName());
       studentResponseDto.setEmail(student.getEmail());
       studentResponseDto.setMobNo(student.getMobNo());
       studentResponseDto.setAge(student.getAge());
       studentResponseDto.setCountry(student.getCountry());
       studentResponseDto.setCardId(student.getCard().getId());

       return studentResponseDto;
    }

    public String updateMobNo(StudentUpdateMobRequestDto studentReq)
    {
        // get existing student (from DB) with the id (that has been provided through postman)

        Student originalStudent = studentRepository.findById(studentReq.getId()).get();
        originalStudent.setMobNo(studentReq.getMobNo());            // set its mobNo as new mobNo
        studentRepository.save(originalStudent);
        return ("Mobile no. updated successfully");
    }

    public String getSumOfFinesPaid(String studentName)
    {
        Student student = studentRepository.findByName(studentName);
        int cardId = student.getCard().getId();
        int sumOfFines = transactionRepository.findSumOfFinesPaidByStudent(cardId);
        return ("Total fine paid till now is: "+sumOfFines+" Rs.");
    }
}
